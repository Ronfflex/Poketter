#!/bin/bash

# Script de d√©marrage pour Poketter
echo "üöÄ D√©marrage de Poketter..."

# V√©rifier si nous sommes dans le bon r√©pertoire
if [ ! -d "api" ] || [ ! -d "front" ]; then
    echo "‚ùå Erreur: Ce script doit √™tre ex√©cut√© depuis la racine du projet Poketter"
    exit 1
fi

# Fonction pour d√©tecter la commande Docker Compose
get_docker_compose_cmd() {
    if command -v docker-compose &> /dev/null; then
        echo "docker-compose"
    elif docker compose version &> /dev/null; then
        echo "docker compose"
    else
        echo ""
    fi
}

# Fonction pour d√©marrer l'API avec Docker Compose
start_api() {
    echo "üì° D√©marrage de l'API avec Docker Compose..."
    cd api
    
    # D√©tecter la commande Docker Compose
    DOCKER_COMPOSE_CMD=$(get_docker_compose_cmd)
    
    if [ -z "$DOCKER_COMPOSE_CMD" ]; then
        echo "‚ùå Erreur: Docker Compose n'est pas install√©."
        echo "üí° Solutions possibles:"
        echo "   - Si vous utilisez Docker Desktop, Docker Compose est int√©gr√©"
        echo "   - V√©rifiez que Docker est bien d√©marr√©"
        echo "   - Installez Docker Desktop: https://www.docker.com/products/docker-desktop/"
        exit 1
    fi
    
    echo "üîß Utilisation de: $DOCKER_COMPOSE_CMD"
    
    # V√©rifier si .env existe
    if [ ! -f ".env" ]; then
        echo "‚ö†Ô∏è  Attention: Fichier .env manquant. Copie de .env.example..."
        cp .env.example .env
        echo "‚úèÔ∏è  Veuillez modifier le fichier .env avec vos param√®tres"
    fi
    
    # Arr√™ter les conteneurs existants
    echo "üßπ Arr√™t des conteneurs existants..."
    $DOCKER_COMPOSE_CMD down
    
    # Construire et d√©marrer les conteneurs
    echo "üîß Construction et d√©marrage des conteneurs..."
    $DOCKER_COMPOSE_CMD up --build -d
    
    echo "‚úÖ API et base de donn√©es d√©marr√©es sur http://localhost:3000"
    echo "üìä Base de donn√©es PostgreSQL disponible sur localhost:5432"
    cd ..
}

# Fonction pour d√©marrer Flutter
start_flutter() {
    echo "üì± D√©marrage de l'application Flutter..."
    cd front
    
    # V√©rifier si flutter est install√©
    if ! command -v flutter &> /dev/null; then
        echo "‚ùå Erreur: Flutter n'est pas install√©. Veuillez installer Flutter: https://flutter.dev/"
        exit 1
    fi
    
    # R√©cup√©rer les d√©pendances
    echo "üì¶ Installation des d√©pendances Flutter..."
    flutter pub get
    
    # D√©marrer l'application
    echo "‚úÖ Lancement de l'application Flutter..."
    flutter run -d chrome
    cd ..
}

# Fonction de nettoyage
cleanup() {
    echo "üßπ Arr√™t des services..."
    cd api
    DOCKER_COMPOSE_CMD=$(get_docker_compose_cmd)
    if [ ! -z "$DOCKER_COMPOSE_CMD" ]; then
        $DOCKER_COMPOSE_CMD down
    fi
    cd ..
    exit 0
}

# Capturer le signal d'interruption
trap cleanup SIGINT

# D√©marrer les services
start_api
echo "‚è≥ Attente du d√©marrage de l'API (10 secondes)..."
sleep 10  # Attendre que l'API et la DB d√©marrent compl√®tement
start_flutter

# Attendre la fin
wait
